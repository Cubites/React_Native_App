Q1. 다음 빈칸에 들어갈 알맞은 답안을 적용해 실행 시키시오.
function joinStudy(name: string, age: number): ( 빈칸 ) {
  if (age > 23) {
    console.log(name)
  }
}
joinStudy('John Doe', 35)
답 : void

Q2. 아래 arr는 숫자로 이루어진 배열이고 수정이 불가능하다. 이때 빈칸에 들어갈 답안을 적용해 실행 시키시오.
let arr: ( 빈칸 ) = [1,2,3];
답 : ReadonlyArray<number>

Q3. OX퀴즈
(  ) 클래스끼리는 상속이 가능하지만 인터페이스간에는 상속이 불가능하다.
(  ) enum은 javascript로 컴파일 된 후에도 남아있다.
답 : X (인터페이스도 상속 가능) , X (컴파일 된 후 사라짐)

Q4. 다음중 Capt 타입은 어떤 모습인가?
interface Person {
  name: string;
  age: number;
}
interface Developer {
  name: string;
  skill: number;
}
type Capt = Person & Developer;

// Capt타입
{
	name: string;
}


Q5. 다음 빈칸에 들어갈 수 있는 것을 모두 작성해주세요.
interface Animal{
  name: string;
	age: number,
  move: number;
}
interface Bird{
  name: string;
  	age: number;
  fly: string;
}
function hawk(sth: Animal & Bird) {
 // 여기에 답안을 작성해주세요.
	name: string;
	age: number;
}
풀이 : hawk() 함수가 호출하는 시점에 animal 타입이 올지 Bird 타입이 올지 알 수 없기 때문에
	어느 타입이 들어오든 문제가 없어야(오류가 나지 않아야) 한다.
	따라서 두 타입이 모두 갖고 있는 속성을 타입으로 가져야 함

Q6. 다음 코드가 console에 출력되는 결과는 무엇일까요?
class Animal {
    name: string;
    constructor(theName: string) { this.name = theName; }
    move(distanceInMeters: number = 0) {
        console.log(`${this.name} moved ${distanceInMeters}m.`);
    }
}

class Snake extends Animal {
    constructor(name: string) { super(name); }
    move(distanceInMeters = 5) {
        console.log("Slithering...");
        super.move(distanceInMeters);
    }
}

class Horse extends Animal {
    constructor(name: string) { super(name); }
    move(distanceInMeters = 45) {
        console.log("Galloping...");
        super.move(distanceInMeters);
    }
}

let sam = new Snake("Sammy the Python");
let tom: Animal = new Horse("Tommy the Palomino");

sam.move();
tom.move(34);
//답안



Q7. 타입스크립트에서 어떠한 클래스 혹은 함수에서 사용할 타입을 그 함수나 클래스를 사용할 때 결정하는 프로그래밍 기법은?
답 : 제네릭


Q8-1. 다음 두 가지 방법 중 어떤 방법이 컴포넌트 재사용성을 높일 수 있는 방법이라고 생각하는가? 그리고 그 이유는 무엇인가? 답 : 2번
// 1번
class Stack {
  private data: any[] = [];

  contructor() {}

  push(item: any): void {
    this.data.push(item);
  }

  pop(): any {
    return this.data.pop();
  }
}
// 2번

class Stack<T> {
  private data: T[] = [];

  constructor() {}

  push(item: T): void {
    this.data.push(item);
  }

  pop() {
    return this.data.pop();
  }
}



08-2. 마지막 로그에 찍히는 numberStack과 stringStack의 데이터를 표기하시오.
class Stack<T> {
  private data: T[] = [];

  constructor() {}

  push(item: T): void {
    this.data.push(item);
  }

  pop() {
    return this.data.pop();
  }
}

const numberStack = new Stack<number>();
const stringStack = new Stack<string>();
numberStack.push(1);
numberStack.push(2);
numberStack.push(3);
stringStack.push('a');
stringStack.push('b');
numberStack.pop();
stringStack.pop();
console.log(numberStack);
console.log(stringStack);
// stringStack
"data": [

]

// numberStack
"data": [

]
